#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AI_ROOT="$(dirname "$SCRIPT_DIR")"
PROJECT_ROOT="$(dirname "$AI_ROOT")"

# Detect if running from ai-cli repo or from a project
if [ -d "$PROJECT_ROOT/templates/plugins" ]; then
    # Running from ai-cli repo (development mode)
    PLUGINS_DIR="$PROJECT_ROOT/templates/plugins"
else
    # Running from a user project - plugins need to be fetched
    PLUGINS_DIR=""
fi

CONFIG_FILE="$PROJECT_ROOT/.ai-cli.json"

# Check if .ai-cli.json exists
check_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${RED}❌ No .ai-cli.json found in current directory${NC}"
        echo "   Run 'install.sh' first to initialize the project"
        exit 1
    fi
}

# Get installed plugins from config
get_installed_plugins() {
    if [ -f "$CONFIG_FILE" ]; then
        # Check if jq is available
        if command -v jq &> /dev/null; then
            jq -r '.plugins[]' "$CONFIG_FILE" 2>/dev/null || echo ""
        else
            # Fallback: simple grep/sed parsing
            grep -o '"plugins":\s*\[.*\]' "$CONFIG_FILE" | sed 's/.*\[//' | sed 's/\].*//' | tr ',' '\n' | tr -d ' "' | grep -v '^$'
        fi
    fi
}

# List available and installed plugins
list_plugins() {
    echo -e "${BLUE}Available plugins:${NC}"
    echo ""

    # Get installed plugins
    installed_plugins=($(get_installed_plugins))

    # List all plugins from templates/plugins/
    for plugin_path in "$PLUGINS_DIR"/*; do
        if [ -d "$plugin_path" ]; then
            plugin_name=$(basename "$plugin_path")

            # Check if installed
            is_installed=false
            for installed in "${installed_plugins[@]}"; do
                if [ "$installed" = "$plugin_name" ]; then
                    is_installed=true
                    break
                fi
            done

            if [ "$is_installed" = true ]; then
                echo -e "  ${GREEN}✓${NC} $plugin_name ${YELLOW}(installed)${NC}"
            else
                echo -e "    $plugin_name"
            fi
        fi
    done
    echo ""
}

# Add a plugin
add_plugin() {
    local plugin_name="$1"

    if [ -z "$plugin_name" ]; then
        echo -e "${RED}❌ Plugin name required${NC}"
        echo "   Usage: ai-cli plugins add <plugin-name>"
        exit 1
    fi

    check_config

    # Check if plugin exists
    if [ ! -d "$PLUGINS_DIR/$plugin_name" ]; then
        echo -e "${RED}❌ Plugin '$plugin_name' not found${NC}"
        echo "   Run 'ai-cli plugins list' to see available plugins"
        exit 1
    fi

    # Check if already installed
    installed_plugins=($(get_installed_plugins))
    for installed in "${installed_plugins[@]}"; do
        if [ "$installed" = "$plugin_name" ]; then
            echo -e "${YELLOW}⚠️  Plugin '$plugin_name' already installed${NC}"
            exit 0
        fi
    done

    # Copy plugin files to .ai/
    echo -e "${BLUE}Installing plugin: $plugin_name${NC}"

    if [ -d "$PLUGINS_DIR/$plugin_name/commands" ]; then
        mkdir -p .ai/commands
        cp -r "$PLUGINS_DIR/$plugin_name/commands"/* .ai/commands/
        echo -e "${GREEN}✓${NC} Copied commands"
    fi

    if [ -d "$PLUGINS_DIR/$plugin_name/agents" ]; then
        mkdir -p .ai/agents
        cp -r "$PLUGINS_DIR/$plugin_name/agents"/* .ai/agents/
        echo -e "${GREEN}✓${NC} Copied agents"
    fi

    if [ -d "$PLUGINS_DIR/$plugin_name/context" ]; then
        mkdir -p .ai/context
        # For lang-* plugins, copy the context folder with the plugin name
        if [[ "$plugin_name" == lang-* ]]; then
            lang_name="${plugin_name#lang-}"
            mkdir -p ".ai/context/$lang_name"
            cp -r "$PLUGINS_DIR/$plugin_name/context"/* ".ai/context/$lang_name/"
            echo -e "${GREEN}✓${NC} Copied context to .ai/context/$lang_name/"
        else
            cp -r "$PLUGINS_DIR/$plugin_name/context"/* .ai/context/
            echo -e "${GREEN}✓${NC} Copied context to .ai/context/"
        fi
    fi

    # Update .ai-cli.json
    if command -v jq &> /dev/null; then
        # Use jq if available
        tmp=$(mktemp)
        jq --arg plugin "$plugin_name" '.plugins += [$plugin]' "$CONFIG_FILE" > "$tmp"
        mv "$tmp" "$CONFIG_FILE"
    else
        # Fallback: manual update
        sed -i.bak "s/\"plugins\": \[/\"plugins\": [\"$plugin_name\", /" "$CONFIG_FILE"
        rm -f "${CONFIG_FILE}.bak"
    fi

    echo -e "${GREEN}✅ Plugin '$plugin_name' installed successfully${NC}"
}

# Update ai-cli and installed plugins
update() {
    check_config

    echo -e "${BLUE}Updating ai-cli...${NC}"

    # Run update.sh
    if [ -f "$REPO_ROOT/update.sh" ]; then
        bash "$REPO_ROOT/update.sh"
    else
        echo -e "${RED}❌ update.sh not found${NC}"
        exit 1
    fi
}

# Show help
show_help() {
    echo "ai-cli - AI Configuration CLI"
    echo ""
    echo "Usage:"
    echo "  ai-cli plugins list              List available plugins"
    echo "  ai-cli plugins add <plugin>      Install a plugin"
    echo "  ai-cli update                    Update ai-cli and plugins"
    echo "  ai-cli help                      Show this help"
    echo ""
}

# Main command dispatcher
case "${1:-}" in
    plugins)
        case "${2:-}" in
            list)
                list_plugins
                ;;
            add)
                add_plugin "$3"
                ;;
            *)
                echo -e "${RED}❌ Unknown plugins command: ${2:-}${NC}"
                echo "   Usage: ai-cli plugins [list|add]"
                exit 1
                ;;
        esac
        ;;
    update)
        update
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}❌ Unknown command: ${1:-}${NC}"
        show_help
        exit 1
        ;;
esac
